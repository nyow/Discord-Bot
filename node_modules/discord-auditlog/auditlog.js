/*
Simple Discord.js module to log member-related event
Authors: Flisher et Patrix
Version: 1.8.1

History:
1.8.1 - Fixed duplicate trigger on Join
1.8.0 - Added Mesage Deleted and Message Updated
1.7.2 - Fixed logic check on row parent id crash.
1.7.1 - NodeJS Linting
1.7.0 - Rollback to 1.5.2 pre-linted
1.5.2 - Adding the date of creation of the user when it join
1.5.0 - Rewrote the module as a big object
1.4.0 - Removed on("ready") and adjusted console.log to new Flisher's format
1.3.1 - Removed Verbose message when voiceUpdate is set to false
1.3.0 - Rewrote the log triage mechanism
1.2.1 - Fixed README.md documentation
1.2.0 - Improved collection.find to the new format (remove deprecation warning in discord.js v11.4 and prepare for v12)
1.0.2 - Fixed false positive and formating on voice channel change
1.0.0 - Initial npmjs push

*/

module.exports = function (bot, options) {
	const description = {
		name: `discord-auditlog`,
		filename: `auditlog.js`,
		version: `1.7.3`
	}

	const eventtype = {
		guildMemberAdd: "movement",
		guildMemberRemove: "movement",
		guildBanAdd: "movement",
		guildBanRemove: "movement",
		guildMemberUpdate: "auditlog",
		usernameChangedMsg: "auditlog",
		discriminatorChangedMsg: "auditlog",
		avatarChangedMsg: "auditlog",
		messageDelete: "auditmsg",
		messageUpdate: "auditmsg",
		voiceStateUpdate: "voice"
	}
	console.log(`Module: ${description.name} | Loaded version ${description.version} from ("${description.filename}")`)

	// Event Handlers
	/*
	COLORS  
		:join: 						USER JOINED 				65280					https://cdn.discordapp.com/emojis/435119354867220511.png
		:leave: 					USER LEFT 					16711680				https://cdn.discordapp.com/emojis/435119363595436042.png
		:kick: 						USER KICKED 				16748544				https://cdn.discordapp.com/emojis/435119368989573122.png
		:ban: 						USER BANNED 				16711901				https://cdn.discordapp.com/emojis/435119375138422811.png
		:unban:						USER UNBANNED				16776960				https://cdn.discordapp.com/emojis/435462140900409344.png

		:nicknamechange: 			NICKNAME UPDATE 			29372					https://cdn.discordapp.com/emojis/435119397237948427.png
		:usernamechange: 			USERNAME UPDATE 			29372					https://cdn.discordapp.com/emojis/435119402279763968.png
		:avatarchange: 				AVATAR UPDATE 				29372					https://cdn.discordapp.com/emojis/435119382910337024.png
		:discriminatorchange: 		DISCRIMINATOR UPDATE 		29372					https://cdn.discordapp.com/emojis/435119390078271488.png

		:channeljoin: 				CHANNEL JOINED  			3381555					https://cdn.discordapp.com/emojis/435184638160404480.png
		:channelexit: 				CHANNEL LEFT 				10040115				https://cdn.discordapp.com/emojis/435174900227899393.png
		:channelchange: 			CHANNEL SWITCH 				13421568				https://cdn.discordapp.com/emojis/435440286559371265.png

		:messageDelete:				MESSAGE DELETE				16711680				https://cdn.discordapp.com/emojis/619328827872641024.png
		:messageUpdate:				MESSAGE UPDATE				16737792				https://cdn.discordapp.com/emojis/619328813381320735.png
*/

	//MESSAGE DELETE
	bot.on('messageDelete', message => {
		if (message.author.bot === true) return;
		var embed = {
			"description": 
`
**Author : ** <@${message.member.user.id}> - *${message.member.user.tag}*
**Date : ** ${message.createdAt}
**Channel : ** <#${message.channel.id}> - *${message.channel.name}*

**Deleted Message : **
\`\`\`
${message.content.replace(/`/g,"'")}
\`\`\`

**Attachment URL : **
${message.attachments.map(x => x.proxyURL)}

`,
			"image": {
				"url": message.attachments.map(x => x.proxyURL)[0]
			},
			"color": 16711680,
			"timestamp": new Date(),
			"footer": {
				"text": `Deleted : `
			},
			"author": {
				"name": `MESSAGE DELETED`,
				"icon_url": "https://cdn.discordapp.com/emojis/619328827872641024.png"
			}
		};
		send(bot, message.member.guild, options, embed, "messageDelete")
	});

	//MESSAGE UPDATE
	bot.on('messageUpdate', (oldMessage,newMessage) => {
		if (oldMessage.author.bot === true) return;
		if (oldMessage.content === newMessage.content) return;
		var embed = {
			"description": 
`
**Author : ** <@${newMessage.member.user.id}> - *${newMessage.member.user.tag}*
**Date : ** ${newMessage.createdAt}
**Channel : ** <#${newMessage.channel.id}> - *${newMessage.channel.name}*

**Orignal Message : **
\`\`\`
${oldMessage.content.replace(/`/g,"'")}
\`\`\`
**Updated Message : **
\`\`\`
${newMessage.content.replace(/`/g,"'")}
\`\`\`
`,
			"color": 16737792,
			"timestamp": new Date(),
			"footer": {
				"text": `Edited : `
			},
			"author": {
				"name": `MESSAGE EDITED`,
				"icon_url": "https://cdn.discordapp.com/emojis/619328813381320735.png"
			}
		};
		send(bot, newMessage.member.guild, options, embed, "messageUpdate")
	});

	//USER JOINED
	bot.on('guildMemberAdd', member => {
		var embed = {
			"description": `<@${member.user.id}> - *${member.user.id}*\nUser Created on: ${new Date(member.user.createdTimestamp).toDateString()}`,
			"url": member.user.displayAvatarURL,
			"color": 65280,
			"timestamp": new Date(),
			"footer": {
				"text": `${member.nickname || member.user.username}`
			},
			"thumbnail": {
				"url": member.user.displayAvatarURL,
			},
			"author": {
				"name": `USER JOINED : ${member.user.tag}`,
				"icon_url": "https://cdn.discordapp.com/emojis/435119354867220511.png"
			}
		};
		send(bot, member.guild, options, embed, "guildMemberAdd")
	});

	//USER LEFT
	bot.on('guildMemberRemove', member => {
		var embed = {
			"description": `<@${member.user.id}> - *${member.user.id}*`,
			"url": member.user.displayAvatarURL,
			"color": 16711680,
			"timestamp": new Date(),
			"footer": {
				"text": `${member.nickname || member.user.username}`
			},
			"thumbnail": {
				"url": member.user.displayAvatarURL,
			},
			"author": {
				"name": `USER LEFT : ${member.user.tag}`,
				"icon_url": "https://cdn.discordapp.com/emojis/435119363595436042.png"
			},
			"fields": [{
				"name": "Nickname",
				"value": `**${member.nickname || member.user.username}**`,
				"inline": true
			}]
		};
		send(bot, member.guild, options, embed, "guildMemberRemove")

	});
	//USER KICKED
	//Not very doable

	//USER BANNED
	bot.on("guildBanAdd", (banguild, banuser) => {
		var embed = {
			"description": `<@${banuser.id}> - *${banuser.id}*`,
			"url": banuser.displayAvatarURL,
			"color": 16711901,
			"timestamp": new Date(),
			"footer": {
				"text": `${banuser.username}`
			},
			"thumbnail": {
				"url": banuser.displayAvatarURL,
			},
			"author": {
				"name": `USER BANNED : ${banuser.tag}`,
				"icon_url": "https://cdn.discordapp.com/emojis/435119375138422811.png"
			}
		};
		send(bot, banguild, options, embed, "guildBanAdd")
	});

	//USER UNBANNED
	bot.on("guildBanRemove", (banguild, banuser) => {
		var embed = {
			"description": `<@${banuser.id}> - *${banuser.id}*`,
			"url": banuser.displayAvatarURL,
			"color": 16776960,
			"timestamp": new Date(),
			"footer": {
				"text": `${banuser.username}`
			},
			"thumbnail": {
				"url": banuser.displayAvatarURL,
			},
			"author": {
				"name": `USER UNBANNED : ${banuser.tag}`,
				"icon_url": "https://cdn.discordapp.com/emojis/435462140900409344.png"
			}
		};
		send(bot, banguild, options, embed, "guildBanRemove")
	});

	//USER NICKNAME UPDATE
	bot.on('guildMemberUpdate', (oldMember, newMember) => {
		if (oldMember.nickname != newMember.nickname) {
			var embed = {
				"description": `<@${newMember.user.id}> - *${newMember.user.id}*`,
				"url": newMember.user.displayAvatarURL,
				"color": 29372,
				"timestamp": new Date(),
				"footer": {
					"text": `${newMember.nickname || newMember.user.username}`
				},
				"thumbnail": {
					"url": newMember.user.displayAvatarURL,
				},
				"author": {
					"name": `NICKNAME CHANGED: ${newMember.user.tag}`,
					"icon_url": "https://cdn.discordapp.com/emojis/435119397237948427.png"
				},
				"fields": [{
						"name": "Old Nickname",
						"value": `**${oldMember.nickname || oldMember.user.username}**`,
						"inline": true
					},
					{
						"name": "New Nickname",
						"value": `**${newMember.nickname || newMember.user.username}**`,
						"inline": true
					}
				]
			};
			send(bot, newMember.guild, options, embed, "guildMemberUpdate")
		}
	});

	//USER UPDATE AVATAR, USERNAME, DISCRIMINATOR
	bot.on('userUpdate', (oldUser, newUser) => {
		// Log quand le user change de username (et possiblement discriminator)
		var usernameChangedMsg = null;
		var discriminatorChangedMsg = null;
		var avatarChangedMsg = null;

		// search the member from all guilds, since the userUpdate event doesn't provide guild information as it is a global event.
		bot.guilds.forEach(function (guild, guildid) {
			guild.members.forEach(function (member, memberid) {
				if (newUser.id == memberid) {
					// var member = bot.guilds.get(guildid).members.get(member.id)

					//USERNAME CHANGED
					if (oldUser.username != newUser.username) {
						usernameChangedMsg = {
							"description": `<@${newUser.id}> - *${newUser.id}*`,
							"url": newUser.displayAvatarURL,
							"color": 29372,
							"timestamp": new Date(),
							"footer": {
								"text": `${member.nickname || member.user.username}`
							},
							"thumbnail": {
								"url": newUser.displayAvatarURL
							},
							"author": {
								"name": `USERNAME CHANGED: ${newUser.tag}`,
								"icon_url": "https://cdn.discordapp.com/emojis/435119402279763968.png"
							},
							"fields": [{
									"name": "Old Username",
									"value": `**${oldUser.username}**`,
									"inline": true
								},
								{
									"name": "New Username",
									"value": `**${newUser.username}**`,
									"inline": true
								}
							]
						};
					}

					//DISCRIMINATOR CHANGED
					if (oldUser.discriminator != newUser.discriminator) {
						discriminatorChangedMsg = {
							"description": `<@${newUser.id}> - *${newUser.id}*`,
							"url": newUser.displayAvatarURL,
							"color": 29372,
							"timestamp": new Date(),
							"footer": {
								"text": `${member.nickname || member.user.username}`
							},
							"thumbnail": {
								"url": newUser.displayAvatarURL
							},
							"author": {
								"name": `DISCRIMINATOR CHANGED: ${newUser.tag}`,
								"icon_url": "https://cdn.discordapp.com/emojis/435119390078271488.png"
							},
							"fields": [{
									"name": "Old Discriminator",
									"value": `**${oldUser.discriminator}**`,
									"inline": true
								},
								{
									"name": "New Discriminator",
									"value": `**${newUser.discriminator}**`,
									"inline": true
								}
							]
						};
					}

					//AVATAR CHANGED
					if (oldUser.avatar != newUser.avatar) {
						avatarChangedMsg = {
							"description": `<@${newUser.id}> - *${newUser.id}*`,
							"url": newUser.displayAvatarURL,
							"color": 29372,
							"timestamp": new Date(),
							"footer": {
								"text": `${member.nickname || member.user.username}`
							},
							"thumbnail": {
								"url": newUser.displayAvatarURL
							},
							"author": {
								"name": `AVATAR CHANGED: ${newUser.tag}`,
								"icon_url": "https://cdn.discordapp.com/emojis/435119382910337024.png"
							},
							"image": {
								"url": oldUser.displayAvatarURL
							},
							"fields": [{
								"name": "Old Avatar",
								"value": ":arrow_down:"
							}]
						};
					}

					if (usernameChangedMsg) send(bot, guild, options, usernameChangedMsg, "usernameChangedMsg");
					if (discriminatorChangedMsg) send(bot, guild, options, discriminatorChangedMsg, "discriminatorChangedMsg");
					if (avatarChangedMsg) send(bot, guild, options, avatarChangedMsg, "avatarChangedMsg");
				}
			});
		});
	});

	//CHANNEL JOIN LEAVE SWITCH
	bot.on('voiceStateUpdate', (oldMember, newMember) => {
		var oldChannelName
		var newChannelName
		var embed

		//SET CHANNEL NAME STRING
		if (oldMember.voiceChannelID) {
			if (typeof oldMember.voiceChannel.parent !== 'undefined') {
				oldChannelName = `${oldMember.voiceChannel.parent.name}\n\t**${oldMember.voiceChannel.name}**\n*${oldMember.voiceChannelID}*`;
			} else {
				oldChannelName = `-\n\t**${oldMember.voiceChannel.name}**\n*${oldMember.voiceChannelID}*`;
			}
		}
		if (newMember.voiceChannelID) {
			if (typeof newMember.voiceChannel.parent !== 'undefined') {
				newChannelName = `${newMember.voiceChannel.parent.name}\n\t**${newMember.voiceChannel.name}**\n*${newMember.voiceChannelID}*`;
			} else {
				newChannelName = `-\n\t**${newMember.voiceChannel.name}**\n*${newMember.voiceChannelID}*`;
			}
		}

		//JOINED
		if (!oldMember.voiceChannelID && newMember.voiceChannelID) {
			embed = {
				"description": `<@${newMember.user.id}> - *${newMember.user.id}*`,
				"url": newMember.user.displayAvatarURL,
				"color": 3381555,
				"timestamp": new Date(),
				"footer": {
					"text": `${newMember.nickname || newMember.user.username}`
				},
				"thumbnail": {
					"url": newMember.user.displayAvatarURL,
				},
				"author": {
					"name": `Joined channel : ${newMember.user.tag}`,
					"icon_url": "https://cdn.discordapp.com/emojis/435184638160404480.png"
				},
				"fields": [{
					"name": "Joined channel",
					"value": `${newChannelName}`
				}]
			};
		}

		//LEFT
		if (oldMember.voiceChannelID && !newMember.voiceChannelID) {
			embed = {
				"description": `<@${newMember.user.id}> - *${newMember.user.id}*`,
				"url": newMember.user.displayAvatarURL,
				"color": 10040115,
				"timestamp": new Date(),
				"footer": {
					"text": `${newMember.nickname || newMember.user.username}`
				},
				"thumbnail": {
					"url": newMember.user.displayAvatarURL,
				},
				"author": {
					"name": `Left channel : ${newMember.user.tag}`,
					"icon_url": "https://cdn.discordapp.com/emojis/435174900227899393.png"
				},
				"fields": [{
					"name": "Left channel",
					"value": `${oldChannelName}`
				}]
			};
		}

		//SWITCH
		if (oldMember.voiceChannelID && newMember.voiceChannelID) {
			//False positive check
			if (oldMember.voiceChannelID != newMember.voiceChannelID) {
				embed = {
					"description": `<@${newMember.user.id}> - *${newMember.user.id}*`,
					"url": newMember.user.displayAvatarURL,
					"color": 13421568,
					"timestamp": new Date(),
					"footer": {
						"text": `${newMember.nickname || newMember.user.username}`
					},
					"thumbnail": {
						"url": newMember.user.displayAvatarURL,
					},
					"author": {
						"name": `Switched channel : ${newMember.user.tag}`,
						"icon_url": "https://cdn.discordapp.com/emojis/435440286559371265.png"
					},
					"fields": [{
							"name": "Left channel",
							"value": `${oldChannelName}`,
							"inline": true
						},
						{
							"name": "Joined channel",
							"value": `${newChannelName}`,
							"inline": true
						}
					]
				};
			}
		}

		//SEND
		if (embed) {
			send(bot, newMember.guild, options, embed, "voiceStateUpdate")
		}
	});


	//SEND FUNCTION
	function send(bot, guild, options, msg, movement) {
		let embed = ""
		// Initialize option if empty
		if (!options) {
			options = {};
		}

		// Initialize if options are multi-server
		if (options[guild.id]) {
			options = options[guild.id];
		}

		// Add default channel
		if (typeof options.auditlog == 'undefined') options.auditlog = `audit-log`;
		if (typeof options.auditmsg == 'undefined') options.auditmsg = false
		if (typeof options.movement == 'undefined') options.movement = `in-out`;
		if (typeof options.voice == 'undefined') options.voice = false;



		let channelname = (options[eventtype[movement]])
		if (channelname) {
			// define channel object
			let channel = guild.channels.find(val => val.name === channelname)
			if (channel) {
				if (channel.permissionsFor(bot.user).has('SEND_MESSAGES') && channel.permissionsFor(bot.user).has('SEND_MESSAGES')) {
					if (typeof msg === "object") {
						// Embed
						if (channel.permissionsFor(bot.user).has('EMBED_LINKS')) {
							embed = msg;
							channel.send({
								embed
							});
						} else {
							console.log(`${description.name} -> The Bot doesn't have the permission EMBED_LINKS to the configured channel "${channelname}" on server "${guild.name}" (${guild.id})`);
						}
					} else {
						// Send the Message
						channel.send(msg);
					}
				} else {
					console.log(`${description.name} -> The Bot doesn't have the permission to send public message to the configured channel "${channelname}" on server "${guild.name}" (${guild.id})`);
				}
			} else {
				console.log(`${description.name} -> The channel "${channelname}" do not exist on server "${guild.name}" (${guild.id})`);
			}
		} else {
			// console.log(`AuditLog: No channel option for event ${movement} on server "${guild.name}" (${guild.id})`);
		}
	}

};